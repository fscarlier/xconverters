SAD2MADX=Class[{},{$Version="V0.4.1",$VersionDate="11/5/2018"},
  {dir="",fname,elms,mdeftype,fnamemx,offset=False,brho,
    kdef,sol=False,GetSolPara,gs=0},

  Constructor[]:=(
    If[dir<=>"",SetDirectory[dir]];
    fnamemx=If[fname[-4,-1]===".sad",fname[1,-5],fname]//".seq";
    brho=MOMENTUM/SpeedOfLight;
    v=MOMENTUM/Sqrt[MOMENTUM^2+MASS^2];
    kdef=mdeftype[_]="***";
    GetSolPara[_,{}]={};
    GetSolPara[elm_,keys_]:=(GetSolPara[elm,keys]=If["BOUND"/.keys/."BOUND"->False,
      Module[
        {{chi1,chi2,chi3,dx,dy,dz}={"CHI1","CHI2","CHI3","DX","DY","DZ"}/.keys/.
          {"CHI1"->0,"CHI2"->0,"CHI3"->0,"DX"->0,"DY"->0,"DZ"->0},
          cchi1,cchi2,cchi3,r11,r12,r13,r21,r22,r23,r31,r32,r33,dpx,dpy,ori=LINE["DIR",elm]},
        cchi1=Cos[chi1];
        schi1=Sin[chi1];
        cchi2=Cos[chi2];
        schi2=Sin[chi2];
        cchi3=Cos[chi3];
        schi3=Sin[chi3];
        r11= cchi1*cchi3+schi1*schi2*schi3;
        r12=-cchi2*schi3;
        r13= schi1*cchi3-cchi1*schi2*schi3;
        r21=-schi1*schi2*cchi3+cchi1*schi3;
        r22= cchi2*cchi3;
        r23= cchi1*schi2*cchi3+schi1*schi3;
        r31=-schi1*cchi2;
        r32=-schi2;
        r33= cchi1*cchi2;
        dpx=r13;
        dpy=r23;
        If[sol=~sol,
          {dx,dy,dz}={
            r11 dx+r12 dy+r13 dz,
            r21 dx+r22 dy+r23 dz,
            r31 dx+r32 dy+r33 dz},
          {dx,dy,dz}=-{dx,dy,dz}];
        { "BOUND"->1,
          "KICK1"->dx,"KICK2"->dpx,
          "KICK3"->dy,"KICK4"->dpy,
          "KICK5"->dz,
          "RM11"->r11,"RM13"->r12,"RM15"->r13*v,
          "RM22"->r11,"RM24"->r12,"RM26"->r13/v,
          "RM31"->r21,"RM33"->r22,"RM35"->r23*v,
          "RM42"->r21,"RM44"->r22,"RM46"->r23/v,
          "RM51"->r31/v,"RM53"->r32/v,"RM55"->r33,"RM66"->1}],
      {}
      ]);
    );

  MXTYPE["QUAD",___]="QUADRUPOLE";
  MXTYPE["SEXT",___]="SEXTUPOLE";
  MXTYPE["BEND",keys_]:=If[("ANGLE"/.keys),"RBEND","***","***"];
  MXTYPE["MULT",keys_]:=Module[{{l,k,ks}=
    {"L",{"K1","K2","K3","K4"},{"SK1","SK2","SK3","SK4"}}/.keys/._String->0},
    If[l,
      If[ks==={0,0,0,0},
        Switch[k,
          {_,0,0,0},"QUADRUPOLE",
          {0,_,0,0},"SEXTUPOLE",
          {0,0,_,0},"OCTUPOLE",
          {0,0,0,_},"DECAPOLE",
          _,"***"],
        "MULTIPOLE"],
      "MULTIPOLE",
      "***"]];
  MXTYPE["CAVI",___]="RFCAVITY";
  MXTYPE["MARK",keys_]:=If["OFFSET"/.keys,
    If[offset,"MARKER","***","***"],
    "MARKER",
    "MARKER"];
  MXTYPE["MONI",___]="MONITOR";
!  MXTYPE["SOL",{}]="***";
!  MXTYPE["SOL",keys_]:=(Print["MXTYPE SOL ",keys];If["BOUND"/.keys,"MATRIX","***","***"]);
  MXTYPE["SOL",_]="***";
  MXTYPE["DRIFT",k:{"BZ"->bz_,___}]:=If[bz,"SOLENOID","***","***"];
  
  MXTYPE[__]="***";

  MXKEY[_,"ROTATE"]="TILT";
  MXKEY[_,"PHI"]="LAG";
  MXKEY[_,"BZ"]="KS";
  MXKEY["MULTIPOLE",k:("K1"|"K2"|"K3"|"K4")]:="KNL";
  MXKEY["MULTIPOLE",k:("SK1"|"SK2"|"SK3"|"SK4")]:="KSL";
  MXKEY[_,x_]:=x;

  MXVALUE["RBEND"|"SBEND","L",keys_,_]:=Module[{{theta,l}={"ANGLE","L"}/.keys},
    If[theta,
      2 l/theta*Sin[theta/2],
      l]];
  MXVALUE["SBEND",k:"E1"|"E2",keys_,n_]:=(k/.keys)//" * "//"ANGLE"//n;
  MXVALUE["RBEND",k:"E1"|"E2",keys_,n_]:=((k/.keys)-0.5)//" * "//"ANGLE"//n;
  MXVALUE["MARKER",__]=0;
  MXVALUE["MONITOR",__]=0;
  MXVALUE["RFCAVITY","PHI",keys_,_]:=("PHI"/.keys)/2/Pi*0;
  MXVALUE["RFCAVITY",k:("FREQ"|"VOLT"),keys_,_]:=(k/.keys)/1e6;
  MXVALUE["MULTIPOLE",k:("K0"|"K1"|"K2"|"K3"|"K4"),keys_,_]:=
    {"K0","K1","K2","K3","K4"}/.keys/.
  {"K0"->0,"K1"->0,"K2"->0,"K3"->0,"K4"->0};
  MXVALUE["MULTIPOLE",k:("SK0"|"SK1"|"SK2"|"SK3"|"SK4"),keys_,_]:=
    {"SK0","SK1","SK2","SK3","SK4"}/.keys/.
  {"SK0"->0,"SK1"->0,"SK2"->0,"SK3"->0,"SK4"->0};
  MXVALUE[_,k:("K1"|"K2"|"K3"|"K4"),keys_,_]:=Module[{{v,l}={k,"L"}/.keys},
    If[l,
      v/l,
      v]];
  MXVALUE["MATRIX","BOUND",___]=0;
  MXVALUE["MATRIX",k_?((#[1,4]==="KICK"||#[1,2]==="RM")&),keys_,_]:=k/.keys;
  MXVALUE[_,"ROTATE",keys_,_]:=-"ROTATE"/.keys;
  MXVALUE[_,k_,keys_,_]:=k/.keys;
  MXVALUE[_,"RADIUS",_]=0;

  ConvElem[elm_]:=Module[{name=Element["NAME",elm],n,keys,type,mxtype,v},
    {n,type,keys}=DeleteCases[SetElement[name],(_->0)|(_->-0),{2}];
    Switch[type,
      "BEND",keys=Join[keys,{"E1"->0,"E2"->0}],
      "CAVI",AppendTo[keys,"PHI"->0],
      "DRIFT",If[bz=LINE["BZS",elm],
        PrependTo[keys,"BZ"->bz]],
      "SOL",Print["SOL ",keys];If[keys<=>{},keys=GetSolPara[elm,keys]]
      ];
    mxtype=MXTYPE[type,keys];
    mdeftype[name]=mxtype;
    If[mxtype <=> "***",
      {n,mxtype,Union[DeleteCases[{MXKEY[mxtype,#],MXVALUE[mxtype,#,keys,n]}&/@(keys[[,1]]),{_,0}]]},
      Null[]]
    ];

  ConvertElements[]:=Module[{l=Element["LENGTH"]},
    el=Table[ConvElem[i],{i,l}]];

  DefineVar[{n_,t_,lk_}]:=Module[{s="",n1=n//" = "},
    Switch[#[[2]],
      _String,Null[],
      _,s=s//#[[1]]//n1//#[[2]]//";\n"]&/@lk;
    s];

  DefineElement[{n_,t_,lk_}]:=Module[{s=n//" : "//t//", ",n1=n//", "},
    (s=s//#[[1]]//":= "//
      Switch[#[[2]],
        _String,#[[2]]//", ",
        _List,#[[2]]//", ",
        _,#[[1]]//n1])&/@lk;
    s[1,-3]//";\n"];  

!  GetCenter["SOLENOID"|"MATRIX"|"MARKER",k_,k1_,gs_]:=Module[{l=LINE["L",k]},
!    {gs+l/2,gs+l}];
  GetCenter[_,k_,k1_,gs_]:={(LINE["S",k]+LINE["S",k1])/2,LINE["S",k1]};

  DefineComponent[k_]:=Module[
    {e=LINE["Element",k],n=LINE["NAME",k],k1=k+1,off,s,c,mt},
    If[(mt=mdeftype[e])<=>"***",
      If[LINE["TYPENAME",k]==="MARK",
        k1=k,
        While[LINE["TYPENAME",k1]==="MARK",k1++]];
      {c,gs}=GetCenter[mt,k,k1,gs];
      If[StringPosition[n,"."]==={},n=n//".1"];
      n//": "//e//", at = "//c//";\n",
      gs=gs+LINE["L",k];
      ""]];

  SystemDate[]:=Module[{f=OpenRead["!date"],s},
    s=ReadString[f];
    Close[f];s];

  BNConv[n_]:=StringReplace[n,{"$"->""}];

  CreateMADX[]:=Module[{elms=ConvertElements[],str,fn=OpenWrite[fnamemx]},
    StandardForm[
      PageWidth=2047;
      Write[fn,"!\n!SAD2MADX "//$Version//" ("//$VersionDate//")"];
      Write[fn,"!Conversion of "//fname//" at "//SystemDate[]//"\n!\n"];
      Write[fn,
        "AXISAD =",Twiss["AX","^^^"],"; BXISAD =",Twiss["BX","^^^"],
        "; AYISAD =",Twiss["AY","^^^"],"; BYISAD =",Twiss["BY","^^^"],
        "; EXISAD =",Twiss["EX","^^^"],"; EPXISAD =",Twiss["EPX","^^^"],
        "; EYISAD =",Twiss["EY","^^^"],"; EPYISAD =",Twiss["EPY","^^^"],";"];
      WriteString[fn,#]&/@(DefineVar/@elms);
      Write[fn,""];
      WriteString[fn,#]&/@(DefineElement/@elms);
      Write[fn,""];
      Write[fn,BNConv[BeamLineName[]],": SEQUENCE, REFER = CENTRE, L = "//LINE["S","$$$"]//";"];
      gs=0;
      Do[WriteString[fn,DefineComponent[k]],{k,LINE["LENGTH"]-1}];
      Write[fn,"ENDSEQUENCE;"];
      Close[fn]
      ]];

  ];
